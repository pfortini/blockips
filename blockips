#!/bin/bash

# blockips - Cumulative IP blocking script
# Usage: blockips <ip1> <ip2> <ip3> ...

BLOCKED_IPS_FILE="/var/lib/blockips/blocked_ips.txt"
IPTABLES_CHAIN="BLOCKIPS_INPUT"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    local color=$1
    local message=$2
    echo -e "${color}${message}${NC}"
}

# Function to validate IP address
validate_ip() {
    local ip=$1
    if [[ $ip =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
        IFS='.' read -ra ADDR <<< "$ip"
        for i in "${ADDR[@]}"; do
            if [[ $i -gt 255 ]]; then
                return 1
            fi
        done
        return 0
    else
        return 1
    fi
}

# Function to check if script is run as root
check_root() {
    if [[ $EUID -ne 0 ]]; then
        print_status $RED "Error: This script must be run as root (use sudo)"
        exit 1
    fi
}

# Function to setup directories and files
setup_environment() {
    mkdir -p "$(dirname "$BLOCKED_IPS_FILE")"
    touch "$BLOCKED_IPS_FILE"
    
    # Chain existence check using iptables -S
    if ! iptables -S | grep -q "\-N $IPTABLES_CHAIN"; then
        print_status $YELLOW "Creating iptables chain: $IPTABLES_CHAIN"
        iptables -N "$IPTABLES_CHAIN"
        iptables -I INPUT 1 -j "$IPTABLES_CHAIN"
    fi
}

# Function to add IP to iptables
block_ip_iptables() {
    local ip=$1
    
    # Check if IP is already blocked using iptables -C
    if iptables -C "$IPTABLES_CHAIN" -s "$ip" -j DROP >/dev/null 2>&1; then
        print_status $YELLOW "IP $ip is already blocked in iptables"
        return 0
    fi
    
    # Add iptables rule to block the IP
    if iptables -A "$IPTABLES_CHAIN" -s "$ip" -j DROP; then
        print_status $GREEN "✓ Blocked $ip in iptables"
        return 0
    else
        print_status $RED "Error: Failed to block $ip in iptables"
        return 1
    fi
}

# Function to add IP to Apache .htaccess (optional)
block_ip_apache() {
    local ip=$1
    local htaccess_file="/var/www/html/.htaccess"
    
    # Only proceed if Apache document root exists
    if [[ -d "/var/www/html" ]]; then
        # Create .htaccess if it doesn't exist
        if [[ ! -f "$htaccess_file" ]]; then
            echo "# IP Blocking Rules" > "$htaccess_file"
        fi
        
        # Check if IP is already blocked in .htaccess
        if grep -q "Deny from $ip" "$htaccess_file" 2>/dev/null; then
            return 0
        fi
        
        # Add Apache blocking rule
        echo "Deny from $ip" >> "$htaccess_file"
        print_status $GREEN "✓ Added $ip to Apache .htaccess"
    fi
}

# Function to show usage
show_usage() {
    echo "Usage: $0 <ip1> [ip2] [ip3] ..."
    echo "       $0 --list        (show blocked IPs, paginated)"
    echo "       $0 --list-all    (show all blocked IPs)"
    echo "       $0 --unblock <ip1> [ip2] [ip3] ... (unblock specific IPs)"
    echo "       $0 --clear       (remove all blocks)"
    echo "       $0 --help        (show this help)"
    echo ""
    echo "Examples:"
    echo "  $0 192.168.1.100 10.0.0.5"
    echo "  $0 --list"
    echo "  $0 --unblock 192.168.1.100"
    echo "  $0 --unblock 1.1.1.1 2.2.2.2 3.3.3.3"
}

# Function to list blocked IPs with pagination
list_blocked_ips() {
    mkdir -p "$(dirname "$BLOCKED_IPS_FILE")"
    touch "$BLOCKED_IPS_FILE"
    
    if [[ -s "$BLOCKED_IPS_FILE" ]]; then
        local total_ips=$(wc -l < "$BLOCKED_IPS_FILE")
        print_status $GREEN "Currently blocked IPs ($total_ips total):"
        
        # If more than 20 IPs, use pagination
        if [[ $total_ips -gt 20 ]]; then
            print_status $YELLOW "Showing first 20 IPs. Use 'blockips --list-all' to see all."
            cat "$BLOCKED_IPS_FILE" | sort -V | nl | head -20
            echo ""
            print_status $YELLOW "... and $((total_ips - 20)) more IPs"
        else
            cat "$BLOCKED_IPS_FILE" | sort -V | nl
        fi
    else
        print_status $YELLOW "No IPs are currently blocked"
    fi
}

# Function to list all blocked IPs (no pagination)
list_all_blocked_ips() {
    mkdir -p "$(dirname "$BLOCKED_IPS_FILE")"
    touch "$BLOCKED_IPS_FILE"
    
    if [[ -s "$BLOCKED_IPS_FILE" ]]; then
        local total_ips=$(wc -l < "$BLOCKED_IPS_FILE")
        print_status $GREEN "All blocked IPs ($total_ips total):"
        cat "$BLOCKED_IPS_FILE" | sort -V | nl
    else
        print_status $YELLOW "No IPs are currently blocked"
    fi
}

# Function to unblock an IP
unblock_single_ip() {
    local ip=$1
    local success=0
    
    if ! validate_ip "$ip"; then
        print_status $RED "Error: Invalid IP address format: $ip"
        return 1
    fi
    
    # Remove from iptables
    if iptables -D "$IPTABLES_CHAIN" -s "$ip" -j DROP >/dev/null 2>&1; then
        print_status $GREEN "✓ Unblocked $ip from iptables"
        success=1
    fi
    
    # Remove from file
    if grep -q "^$ip$" "$BLOCKED_IPS_FILE"; then
        grep -v "^$ip$" "$BLOCKED_IPS_FILE" > "${BLOCKED_IPS_FILE}.tmp"
        mv "${BLOCKED_IPS_FILE}.tmp" "$BLOCKED_IPS_FILE"
        print_status $GREEN "✓ Removed $ip from blocked list"
        success=1
    fi
    
    # Remove from Apache .htaccess
    local htaccess_file="/var/www/html/.htaccess"
    if [[ -f "$htaccess_file" ]] && grep -q "Deny from $ip" "$htaccess_file"; then
        sed -i "/Deny from $ip/d" "$htaccess_file"
        print_status $GREEN "✓ Removed $ip from Apache .htaccess"
        success=1
    fi
    
    if [[ $success -eq 0 ]]; then
        print_status $YELLOW "IP $ip was not found in blocked list"
        return 1
    fi
    
    return 0
}

# Batch unblocking function
unblock_ip_batch() {
    local ips=("$@")
    local unblocked_count=0
    local not_found_count=0
    local invalid_count=0
    
    mkdir -p "$(dirname "$BLOCKED_IPS_FILE")"
    touch "$BLOCKED_IPS_FILE"
    
    for ip in "${ips[@]}"; do
        if ! validate_ip "$ip"; then
            print_status $RED "Error: Invalid IP address format: $ip"
            ((invalid_count++))
            continue
        fi
        
        # Check if IP is in blocked list
        if ! grep -q "^$ip$" "$BLOCKED_IPS_FILE"; then
            print_status $YELLOW "IP $ip was not found in blocked list"
            ((not_found_count++))
            continue
        fi
        
        # Unblock the IP
        if unblock_single_ip "$ip"; then
            ((unblocked_count++))
        else
            ((not_found_count++))
        fi
    done
    
    # Summary
    echo ""
    print_status $GREEN "=== UNBLOCK SUMMARY ==="
    echo "IPs successfully unblocked: $unblocked_count"
    echo "IPs not found in blocked list: $not_found_count"
    echo "Invalid IP addresses: $invalid_count"
    
    if [[ $unblocked_count -gt 0 ]]; then
        echo ""
        print_status $GREEN "Total blocked IPs remaining: $(wc -l < "$BLOCKED_IPS_FILE")"
        echo ""
        print_status $YELLOW "Use '$0 --list' to see remaining blocked IPs"
    fi
}

# Function to clear all blocks
clear_all_blocks() {
    read -p "Are you sure you want to remove ALL IP blocks? (y/N): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        # Clear iptables chain
        if iptables -F "$IPTABLES_CHAIN" >/dev/null 2>&1; then
            print_status $GREEN "✓ Cleared all iptables blocks"
        fi
        
        # Clear file
        > "$BLOCKED_IPS_FILE"
        print_status $GREEN "✓ Cleared blocked IPs file"
        
        # Clear Apache .htaccess
        local htaccess_file="/var/www/html/.htaccess"
        if [[ -f "$htaccess_file" ]]; then
            sed -i '/Deny from /d' "$htaccess_file"
            print_status $GREEN "✓ Cleared Apache .htaccess rules"
        fi
        
        print_status $GREEN "All IP blocks have been cleared"
    else
        print_status $YELLOW "Operation cancelled"
    fi
}

# Batch processing function
process_ip_batch() {
    local ips=("$@")
    local new_ips_count=0
    local duplicate_ips_count=0
    local invalid_ips_count=0
    
    local existing_ips=""
    if [[ -s "$BLOCKED_IPS_FILE" ]]; then
        existing_ips=$(cat "$BLOCKED_IPS_FILE")
    fi
    
    # Process each IP
    for ip in "${ips[@]}"; do
        # Validate IP format
        if ! validate_ip "$ip"; then
            print_status $RED "Error: Invalid IP address format: $ip"
            ((invalid_ips_count++))
            continue
        fi
        
        # Duplicate check using string matching
        if [[ "$existing_ips" == *$'\n'"$ip"$'\n'* ]] || [[ "$existing_ips" == "$ip"$'\n'* ]] || [[ "$existing_ips" == *$'\n'"$ip" ]]; then
            print_status $YELLOW "IP $ip is already in blocked list"
            ((duplicate_ips_count++))
            continue
        fi
        
        # Block the IP
        if block_ip_iptables "$ip"; then
            # Add to persistent file
            echo "$ip" >> "$BLOCKED_IPS_FILE"
            
            # Also block in Apache (optional)
            block_ip_apache "$ip"
            
            # Update in-memory list
            existing_ips="${existing_ips}${ip}"$'\n'
            
            ((new_ips_count++))
        fi
    done
    
    # Summary
    echo ""
    print_status $GREEN "=== SUMMARY ==="
    echo "New IPs blocked: $new_ips_count"
    echo "Duplicate IPs (already blocked): $duplicate_ips_count"
    echo "Invalid IPs: $invalid_ips_count"
    
    if [[ $new_ips_count -gt 0 ]]; then
        echo ""
        print_status $GREEN "Total blocked IPs: $(wc -l < "$BLOCKED_IPS_FILE")"
        echo ""
        print_status $YELLOW "Use '$0 --list' to see blocked IPs"
        print_status $YELLOW "Use '$0 --unblock <ip>' to remove a specific IP"
    fi
}

# Main execution
main() {
    # Handle special arguments that don't need root or full setup
    case "$1" in
        --help|-h)
            show_usage
            exit 0
            ;;
        --list|-l)
            list_blocked_ips
            exit 0
            ;;
        --list-all)
            list_all_blocked_ips
            exit 0
            ;;
    esac
    
    # For all other operations, require root and setup
    check_root
    setup_environment
    
    case "$1" in
        --clear)
            clear_all_blocks
            exit 0
            ;;
        --unblock)
            if [[ -z "$2" ]]; then
                print_status $RED "Error: Please specify one or more IP addresses to unblock"
                show_usage
                exit 1
            fi
            # Remove the --unblock argument and pass the rest to batch unblock function
            shift
            unblock_ip_batch "$@"
            exit 0
            ;;
        "")
            print_status $RED "Error: No IP addresses provided"
            show_usage
            exit 1
            ;;
    esac
    
    # Process IP addresses using optimized batch function
    process_ip_batch "$@"
}

# Run main function with all arguments
main "$@"
